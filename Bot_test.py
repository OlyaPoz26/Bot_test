import logging
import datetime
import gspread
from typing import Union
from telegram import CallbackQuery
from oauth2client.service_account import ServiceAccountCredentials
from telegram import ReplyKeyboardMarkup, Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ConversationHandler, ContextTypes, CallbackQueryHandler
)
from dotenv import load_dotenv
import os

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
SPREADSHEET_KEY = os.getenv("GOOGLE_SHEETS_KEY")

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –≠—Ç–∞–ø—ã
(MENU, CATEGORY, DESCRIPTION, AMOUNT, WHO, INCOME_TYPE, INCOME_WHO, INCOME_AMOUNT,
 ORDER_ITEM, ORDER_QUANTITY, ORDER_PRICE, ORDER_DATE,
 PAYMENT_ACTION, CHANGE_STATUS, ORDER_CUSTOMER) = range(15)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–µ
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("telegram-expense-bot.json", scope)
client = gspread.authorize(creds)
spreadsheet = client.open_by_key(SPREADSHEET_KEY)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–†–∞—Å—Ö–æ–¥—ã", "–î–æ—Ö–æ–¥—ã", "–ó–∞–∫–∞–∑—ã"], ["–û–ø–ª–∞—Ç–∞"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)
    return MENU

def get_status_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ü–≤–µ—Ç–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ —Å—Ç–∞—Ç—É—Å–æ–≤"""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üü¶ –ü–ª–∞–Ω", callback_data="status_–ü–ª–∞–Ω"),
            InlineKeyboardButton("üü© –§–∞–∫—Ç", callback_data="status_–§–∞–∫—Ç")
        ],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_status_change")]
    ])


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    context.user_data['mode'] = text

    if text == "–†–∞—Å—Ö–æ–¥—ã":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:")
        return CATEGORY
    elif text == "–î–æ—Ö–æ–¥—ã":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –¥–æ—Ö–æ–¥–∞:")
        return INCOME_TYPE
    elif text == "–ó–∞–∫–∞–∑—ã":
        await update.message.reply_text("–ö—Ç–æ –∑–∞–∫–∞–∑–∞–ª:")
        return ORDER_CUSTOMER
    elif text == "–û–ø–ª–∞—Ç–∞":
        return await show_recent_orders(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É.")
        return MENU

# ======= –†–∞—Å—Ö–æ–¥—ã ======= 
async def category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["category"] = update.message.text
    await update.message.reply_text("–ù–∞ —á—Ç–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ?")
    return DESCRIPTION

async def description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["description"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
    return AMOUNT

async def amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["amount"] = update.message.text
    await update.message.reply_text("–ö—Ç–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª?")
    return WHO

async def who(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["who"] = update.message.text
    now = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")

    row = [
        context.user_data["category"],
        context.user_data["description"],
        context.user_data["amount"],
        context.user_data["who"],
        now,
    ]
    worksheet = spreadsheet.worksheet("CF_out_bot")
    worksheet.append_row(row)
    await update.message.reply_text("‚úÖ –†–∞—Å—Ö–æ–¥ –∑–∞–ø–∏—Å–∞–Ω! –ù–∞–ø–∏—à–∏ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞.")
    return ConversationHandler.END

# ======= –î–æ—Ö–æ–¥—ã =======
async def income_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["income_type"] = update.message.text
    await update.message.reply_text("–ö—Ç–æ –æ–ø–ª–∞—Ç–∏–ª?")
    return INCOME_WHO

async def income_who(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["income_who"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:")
    return INCOME_AMOUNT

async def income_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    now = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")
    worksheet = spreadsheet.worksheet("CF_in_bot")
    worksheet.append_row([
        now,
        context.user_data["income_type"],
        context.user_data["income_who"],
        update.message.text
    ])
    await update.message.reply_text("‚úÖ –î–æ—Ö–æ–¥ –∑–∞–ø–∏—Å–∞–Ω! –ù–∞–ø–∏—à–∏ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞.")
    return ConversationHandler.END

# ======= –ó–∞–∫–∞–∑—ã =======

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# ======= –ó–∞–∫–∞–∑—ã =======
async def order_customer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["customer"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    return ORDER_ITEM

async def order_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["item"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–≤ –∫–≥):")
    return ORDER_QUANTITY

async def order_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["quantity"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É:")
    return ORDER_PRICE

async def order_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–∞
        price = float(update.message.text.replace(',', '.'))
        quantity = float(context.user_data["quantity"].replace(',', '.'))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É
        context.user_data["price"] = price
        context.user_data["order_amount"] = round(price * quantity, 2)
        
        await update.message.reply_text(
            f"–°—É–º–º–∞: {context.user_data['order_amount']} ‚Ç∏ (—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):"
        )
        return ORDER_DATE
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ! –ù–∞–ø—Ä–∏–º–µ—Ä: 150 –∏–ª–∏ 99.50")
        return ORDER_PRICE

async def order_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["delivery_date"] = update.message.text
    context.user_data["status"] = "–ü–ª–∞–Ω"  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
    
    now = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")
    
    try:
        worksheet = spreadsheet.worksheet("CF_orders_bot")
        worksheet.append_row([
            context.user_data["item"],
            context.user_data["quantity"],
            context.user_data["price"],
            context.user_data["order_amount"],
            context.user_data["delivery_date"],
            now,
            context.user_data["status"],
            context.user_data["customer"]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º "–ü–ª–∞–Ω" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        ])
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å
        all_values = worksheet.get_all_values()
        last_row = len(all_values)
        set_status_style(worksheet, last_row, "–ü–ª–∞–Ω")
        
        await update.message.reply_text("‚úÖ –ó–∞–∫–∞–∑ –∑–∞–ø–∏—Å–∞–Ω (—Å—Ç–∞—Ç—É—Å: –ü–ª–∞–Ω)! –ù–∞–ø–∏—à–∏ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑.")
    
    return ConversationHandler.END

# ======= –û–ø–ª–∞—Ç–∞ =======
async def show_recent_orders(update: Union[Update, CallbackQuery], context: ContextTypes.DEFAULT_TYPE):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª update
    if isinstance(update, CallbackQuery):
        message = update.message
    else:
        message = update.message
    
    worksheet = spreadsheet.worksheet("CF_orders_bot")
    records = worksheet.get_all_records()
    
    one_week_ago = datetime.datetime.now() - datetime.timedelta(days=7)
    recent_orders = []
    
    for idx, record in enumerate(records, start=2):
        try:
            record_date = datetime.datetime.strptime(record['–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è'], "%d.%m.%Y %H:%M")
            if record_date >= one_week_ago:
                recent_orders.append((idx, record))
        except:
            continue
    
    if not recent_orders:
        await message.reply_text("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é.")
        return MENU
    
    context.user_data['recent_orders'] = recent_orders
    
    msg = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã (–Ω–µ–¥–µ–ª—è):\n\n"
    for idx, (row_num, order) in enumerate(recent_orders, start=1):
        msg += (f"{idx}. {order['–¢–æ–≤–∞—Ä']} - {order['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']}–∫–≥ - "
               f"{order['–¶–µ–Ω–∞']}‚Ç∏ - –°—Ç–∞—Ç—É—Å: {order.get('–°—Ç–∞—Ç—É—Å', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n")
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ + –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard = [
        [InlineKeyboardButton(f"–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å {i+1}", callback_data=f"change_{row_num}")] 
        for i, (row_num, _) in enumerate(recent_orders)
    ]
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_payment")])  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if isinstance(update, CallbackQuery):
        await message.edit_text(msg, reply_markup=reply_markup)
    else:
        await message.reply_text(msg, reply_markup=reply_markup)
    
    return PAYMENT_ACTION

async def payment_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "cancel_payment":
        await query.edit_message_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞–ø–∏—à–∏ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞.")
        return ConversationHandler.END
    elif query.data.startswith("change_"):
        row_num = int(query.data.split("_")[1])
        context.user_data['editing_row'] = row_num
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Ü–≤–µ—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
            reply_markup=get_status_keyboard()
        )
        return CHANGE_STATUS


def set_status_style(worksheet, row, status):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞"""
    format_dict = {
        "–ü–ª–∞–Ω": {
            "backgroundColor": {"red": 0.0, "green": 0.5, "blue": 1.0},  # –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π
            "textFormat": {"bold": True}
        },
        "–§–∞–∫—Ç": {
            "backgroundColor": {"red": 0.0, "green": 1.0, "blue": 0.2},  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
            "textFormat": {"bold": True}
        }
    }
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —è—á–µ–π–∫—É —Å—Ç–∞—Ç—É—Å–∞ (–∫–æ–ª–æ–Ω–∫–∞ G)
    worksheet.format(f"G{row}", format_dict.get(status, {}))

async def change_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "cancel_status_change":
        await query.edit_message_text("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return await show_recent_orders(query, context)
    
    new_status = query.data.split("_")[1]
    row_num = context.user_data['editing_row']
    
    try:
        worksheet = spreadsheet.worksheet("CF_orders_bot")
        worksheet.update_cell(row_num, 7, new_status)
        set_status_style(worksheet, row_num, new_status)
        await query.edit_message_text(f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_status}'!")
        return await show_recent_orders(query, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å.")
        return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, menu_handler)],
            
            CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, category)],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, description)],
            AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, amount)],
            WHO: [MessageHandler(filters.TEXT & ~filters.COMMAND, who)],
            
            INCOME_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, income_type)],
            INCOME_WHO: [MessageHandler(filters.TEXT & ~filters.COMMAND, income_who)],
            INCOME_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, income_amount)],
            
            ORDER_CUSTOMER: [MessageHandler(filters.TEXT & ~filters.COMMAND, order_customer)],
            ORDER_ITEM: [MessageHandler(filters.TEXT & ~filters.COMMAND, order_item)],
            ORDER_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, order_quantity)],
            ORDER_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, order_price)],
            ORDER_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, order_date)],
            PAYMENT_ACTION: [CallbackQueryHandler(payment_action)],
            CHANGE_STATUS:  [
            CallbackQueryHandler(change_status, pattern="^status_"),
            CallbackQueryHandler(change_status, pattern="^cancel_status_change$")
        ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()